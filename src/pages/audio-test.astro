---
// Audio test page for debugging
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Audio Test - rigboss</title>
  <style>
    body { font-family: system-ui; padding: 20px; background: #1a1a1a; color: white; }
    .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
    .success { background: #065f46; }
    .error { background: #7f1d1d; }
    .info { background: #1e3a8a; }
    button { padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; }
    .meter { width: 200px; height: 20px; background: #333; border-radius: 10px; overflow: hidden; }
    .meter-fill { height: 100%; background: #10b981; transition: width 0.1s; }
    #log { background: #000; padding: 10px; border-radius: 5px; height: 200px; overflow-y: auto; font-family: monospace; font-size: 12px; }
  </style>
</head>
<body>
  <h1>ðŸŽµ rigboss Audio Test</h1>
  
  <div id="status" class="status info">Initializing...</div>
  
  <div>
    <button onclick="testBackendConnection()">Test Backend</button>
    <button onclick="testAudioDevices()">Check Audio Devices</button>
    <button onclick="startRxTest()">Start RX Test</button>
    <button onclick="stopRxTest()">Stop RX Test</button>
  </div>
  
  <div style="margin: 20px 0;">
    <h3>RX Audio Level</h3>
    <div class="meter">
      <div id="rxMeter" class="meter-fill" style="width: 0%"></div>
    </div>
    <span id="rxLevel">0%</span>
  </div>
  
  <div>
    <h3>Log</h3>
    <div id="log"></div>
  </div>

  <script type="module">
    import { io } from '/node_modules/socket.io-client/dist/socket.io.esm.min.js';
    
    let socket = null;
    let audioSocket = null;
    let rxLevel = 0;
    
    function log(message) {
      const logEl = document.getElementById('log');
      const time = new Date().toLocaleTimeString();
      logEl.innerHTML += `[${time}] ${message}\n`;
      logEl.scrollTop = logEl.scrollHeight;
      console.log(message);
    }
    
    function setStatus(message, type = 'info') {
      const statusEl = document.getElementById('status');
      statusEl.textContent = message;
      statusEl.className = `status ${type}`;
    }
    
    function updateRxLevel(level) {
      rxLevel = level;
      document.getElementById('rxMeter').style.width = `${level}%`;
      document.getElementById('rxLevel').textContent = `${Math.round(level)}%`;
    }
    
    window.testBackendConnection = async function() {
      try {
        const response = await fetch('/api/health');
        const health = await response.json();
        log(`Backend health: ${JSON.stringify(health, null, 2)}`);
        
        if (health.audio?.available) {
          setStatus('Backend connected - Audio available', 'success');
        } else {
          setStatus('Backend connected - Audio unavailable', 'error');
        }
      } catch (error) {
        log(`Backend connection failed: ${error.message}`);
        setStatus('Backend connection failed', 'error');
      }
    };
    
    window.testAudioDevices = async function() {
      try {
        const response = await fetch('/api/audio/devices');
        const devices = await response.json();
        log(`Audio devices: ${JSON.stringify(devices, null, 2)}`);
        setStatus('Audio devices checked - see log', 'info');
      } catch (error) {
        log(`Audio device check failed: ${error.message}`);
        setStatus('Audio device check failed', 'error');
      }
    };
    
    window.startRxTest = function() {
      if (audioSocket) {
        log('RX test already running');
        return;
      }
      
      const currentHost = window.location.hostname;
      const backendUrl = currentHost === 'localhost' ? 'http://localhost:3001/audio' : `http://${currentHost}:3001/audio`;
      
      log(`Connecting to audio service: ${backendUrl}`);
      audioSocket = io(backendUrl, { path: '/socket.io' });
      
      audioSocket.on('connect', () => {
        log('Connected to audio service');
        setStatus('Audio service connected', 'success');
        audioSocket.emit('start-audio');
      });
      
      audioSocket.on('server-capabilities', (cap) => {
        log(`Server capabilities: ${JSON.stringify(cap)}`);
      });
      
      audioSocket.on('audio-started', () => {
        log('Audio streaming started');
        setStatus('RX audio streaming active', 'success');
      });
      
      audioSocket.on('audio-data', (audioData) => {
        // Calculate audio level from raw PCM data
        const samples = new Int16Array(audioData);
        let maxLevel = 0;
        for (let i = 0; i < samples.length; i++) {
          maxLevel = Math.max(maxLevel, Math.abs(samples[i] / 32768));
        }
        updateRxLevel(maxLevel * 100);
        
        // Log first few chunks
        if (rxLevel === 0) {
          log(`Received audio data: ${samples.length} samples, max level: ${Math.round(maxLevel * 100)}%`);
        }
      });
      
      audioSocket.on('audio-error', (error) => {
        log(`Audio error: ${error.message}`);
        setStatus(`Audio error: ${error.message}`, 'error');
      });
      
      audioSocket.on('disconnect', () => {
        log('Disconnected from audio service');
        setStatus('Audio service disconnected', 'error');
      });
    };
    
    window.stopRxTest = function() {
      if (audioSocket) {
        audioSocket.emit('stop-audio');
        audioSocket.disconnect();
        audioSocket = null;
        updateRxLevel(0);
        log('RX test stopped');
        setStatus('RX test stopped', 'info');
      }
    };
    
    // Auto-start tests
    setTimeout(() => {
      testBackendConnection();
      setTimeout(testAudioDevices, 1000);
    }, 500);
  </script>
</body>
</html>
